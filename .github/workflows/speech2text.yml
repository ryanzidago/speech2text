name: Speech2Text CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  ELIXIR_VERSION: "1.18.1-otp-27"
  OTP_VERSION: "27.2"
  SERVICE: "speech2text"
  GAR_LOCATION: "europe-west2"
  REGION: "europe-west2"
  GCP_PROJECT_ID: "speech2text-446412"
  # GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  build:
    name: Build and Compile
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Beam
        uses: erlef/setup-beam@v1.18.2
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache Mix Dependencies
        id: cache-mix-dependencies
        uses: actions/cache@v4.2.0
        with:
          path: |
            deps
            _build
          # https://github.com/marketplace/actions/cache#creating-a-cache-key
          # https://github.com/actions/cache/blob/main/examples.md#elixir---mix
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock')}}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        # https://github.com/marketplace/actions/cache#skipping-steps-based-on-cache-hit
        if: steps.cache-mix-dependencies.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Compile
        run: mix compile --warnings-as-errors

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Beam
        uses: erlef/setup-beam@v1.18.2
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      # Add cache configuration for test job
      - name: Cache Mix Dependencies
        id: cache-mix-dependencies
        uses: actions/cache@v4.2.0
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock')}}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install Dependencies
        if: steps.cache-mix-dependencies.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Run Tests
        run: mix test

  deploy:
    name: Deploy to Google Cloud Run
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/486073635759/locations/global/workloadIdentityPools/github-actions/providers/github-actions"
          service_account: "github-actions-deployer@speech2text-446412.iam.gserviceaccount.com"
          # workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          # service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker auth
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin ${{ env.GAR_LOCATION }}-docker.pkg.dev


      - name: Debug Docker Image name
        run: |-
          IMAGE_NAME="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
          echo "Building and pushing image: ${IMAGE_NAME}"

      - name: Build and Push Docker Image
        run: |-
          IMAGE_NAME="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
          echo "::debug::Building and pushing image: ${IMAGE_NAME}"
          # or use this format:
          echo "Building and pushing image: ${IMAGE_NAME}" >&2
          docker build -t "${IMAGE_NAME}" ./
          docker push "${IMAGE_NAME}"

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
          env_vars: |
            SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            PHX_HOST=${{ secrets.PHX_HOST }}
            GOOGLE_CLOUD_RUN=true

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}